using Application_Layer.UserAuth.Dtos;
using Application_Layer.IdeaSessions.DTOs;
using AutoMapper;
using Domain_Layer.Models;
using Application_Layer.Steps.Dtos;
using Application_Layer.StepTemplates.Dtos;

namespace Application_Layer.Common.Mappings
{
    public class DataMappings : Profile
    {
        public DataMappings()
        {
            // User mapping
            CreateMap<UserModel, UserDataDto>().ReverseMap();

            // Step mapping for creation (from DTO to Domain)
            CreateMap<CreateStepRequestDto, Step>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id is generated in handler
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore()) // CreatedAt is set in handler
                .ForMember(dest => dest.Order, opt => opt.Ignore()) // Order is set in handler
                .ForMember(dest => dest.IdeaSession, opt => opt.Ignore()) // Navigation property
                .ForMember(dest => dest.StepTemplate, opt => opt.Ignore()); // Navigation property

            // Step mapping for response (from Domain to DTO)
            CreateMap<Step, CreateStepResponseDto>().ReverseMap(); // This mapping seems fine as is for now
            CreateMap<Step, StepResponseDto>().ReverseMap(); // This mapping seems fine as is for now

            // StepTemplate mappings
            CreateMap<StepTemplate, StepTemplateDto>().ReverseMap();
            CreateMap<StepTemplate, CreateStepTemplateDto>().ReverseMap();

            // IdeaSession with Steps mapping
            CreateMap<IdeaSession, IdeaSessionWithStepsDto>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Steps, opt => opt.MapFrom(src => src.Steps.OrderBy(s => s.Order)))
                .ForMember(dest => dest.MvpPlans, opt => opt.MapFrom(src => src.MvpPlans));

            // Step mapping
            CreateMap<Step, StepDto>()
                .ForMember(dest => dest.StepId, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Order, opt => opt.MapFrom(src => src.Order));

            // Map from CreateIdeaSessionDto to IdeaSession entity
            CreateMap<CreateIdeaSessionDto, IdeaSession>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id is generated by DB/handler
                .ForMember(dest => dest.UserId, opt => opt.Ignore()) // UserId is set by handler
                .ForMember(dest => dest.Status, opt => opt.Ignore()) // Status has default value
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore()) // CreatedAt is set by handler
                .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore()) // UpdatedAt is set by handler
                .ForMember(dest => dest.Steps, opt => opt.Ignore()) // Steps are not part of creation DTO
                .ForMember(dest => dest.MvpPlans, opt => opt.Ignore()) // MvpPlans are not part of creation DTO
                .ForMember(dest => dest.TechRecommendations, opt => opt.Ignore()); // TechRecommendations are not part of creation DTO

            // Map from IdeaSession entity to IdeaSessionDto (Output DTO)
            CreateMap<IdeaSession, IdeaSessionDto>();

            // Map from MvpPlan entity to MvpPlanDto
            CreateMap<MvpPlan, MvpPlanDto>();
        }
    }
}
